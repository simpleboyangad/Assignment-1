create database org1;

USE org1;
CREATE TABLE Customers (
CustomerID INT PRIMARY KEY,
Name VARCHAR(255),
Email VARCHAR(255),
JoinDate DATE
);
use org1;


CREATE TABLE Products (
ProductID INT PRIMARY KEY,
Name VARCHAR(255),
Category VARCHAR(255),
Price DECIMAL(10, 2)
);

CREATE TABLE Orders (
OrderID INT PRIMARY KEY,
CustomerID INT,
OrderDate DATE,
TotalAmount DECIMAL(10, 2),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE OrderDetails (
OrderDetailID INT PRIMARY KEY,
OrderID INT,
ProductID INT,
Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders (OrderID),
FOREIGN KEY (ProductID) REFERENCES Products (ProductID)
);


INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'ramesh kumar', 'ramesh@gmail.com','2020-02-20'),
(4, 'somveer', 'somraj@gmail.com', '2020-06-14'),
(5, 'kumar sanu', 'kumarsanu@gmail.com','2020-03-17'),
(6, 'kittu rajput', 'kitturajput@gamil.com', '2020-08-19'),
(7, 'angad singh', 'angadsingh12911@gmail.com', '2020-12-23'),
(8, 'rahim khan', 'khansahab@gmail.com', '2020-08-03'),
(9, 'reetu kumari', 'reetukumari12@gmail.com', '2023-05-26'),
(10, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05');

INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 999.99),
(2, 'Smartphone', 'Electronics', 499.99),
(3, 'smart watch', 'Electronics', 1556.66),
(4, 'shoes', 'apparel', 2325.40),
(5, 't-shirt', 'cloth', 550.50),
(6, 'jeans', 'cloth',999.90),
(7, 'fan', 'electronics', 1499),
(8, 'battery', 'electronics', 50000.50),
(9, 'shirt', 'clothe', 561),
(10, 'Desk Lamp', 'Home Decor', 29.99);

select* from orders;
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
VALUES
(1, 1, '2020-02-15', 1499.98),
(2, 2, '2020-02-17', 499.99),
(3, 22, '2020-04-18', 1444.11),
(4, 19, '2020-08-07', 2500.25),
(5, 16, '2020-09-08', 1660.60),
(6, 8, '2020-10-14', 600.50),
(7, 27, '2020-12-18', 1880.61),
(8, 14, '2020-06-19', 2250.50),
(9, 11, '2020-08-22', 2150.80),
(10, 25, '2020-03-21', 78.99);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity,
PricePerUnit) VALUES
(1, 1, 1, 1, 999.99),
(2, 1, 2, 1, 499.99),
-- ... Additional 7 records ...
(10, 25, 50, 2, 29.99);

#1. Basic Queries:
#1.1. List all customers.
select * from Customers;

#1.2. Show all products in the 'Electronics' category.
SELECT * FROM Products WHERE Category = 'Electronics';

#1.3. Find the total number of orders placed.
SELECT COUNT(*) AS TotalOrders FROM Orders;

#1.4. Display the details of the most recent order.
SELECT * FROM Orders ORDER BY OrderDate DESC LIMIT 5;

#2. Joins and Relationships:

#2.1. List all products along with the names of the customers who ordered them.
SELECT Products.*, Customers.Name
FROM Products
JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID
JOIN Orders ON OrderDetails.OrderID = Orders.OrderID
JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

#2.2. Show orders that include more than one product.

SELECT * FROM Orders WHERE OrderID IN (
    SELECT OrderID FROM OrderDetails GROUP BY OrderID HAVING COUNT(*) > 1);

#2.3. Find the total sales amount for each customer.

SELECT Customers.CustomerID, Customers.Name, SUM(Products.Price) AS TotalSales
FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Customers.CustomerID, Customers.Name;

#3. Aggregation and Grouping:

#3.1. Calculate the total revenue generated by each product category.

SELECT Category, SUM(Price) AS TotalRevenue
FROM Products
GROUP BY Category;

#3.2. Determine the average order value.

SELECT AVG(TotalAmount) AS AverageOrderValue
FROM (
    SELECT OrderID, SUM(Price) AS TotalAmount
    FROM OrderDetails
    JOIN Products ON OrderDetails.ProductID = Products.ProductID
    GROUP BY OrderID
) AS OrderTotals;

#3.3. Find the month with the highest number of ordres

SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS OrderCount
FROM Orders
GROUP BY Month
ORDER BY OrderCount DESC
LIMIT 1;

#4. Subqueries and Nested Queries:

#4.1. Identify customers who have not placed any orders.

SELECT * FROM Customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

#4.2. Find products that have never been ordered.

SELECT * FROM Products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderDetails);

#4.3. Show the top 3 best-selling products.

SELECT ProductID, 'Name', SUM(Quantity) AS TotalQuantitySold
FROM OrderDetails
GROUP BY ProductID, 'Name'
ORDER BY TotalQuantitySold DESC
LIMIT 3;

#5. Date and Time Functions:

#5.1. List orders placed in the last month.

SELECT * FROM Orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

#5.2. Determine the oldest customer in terms of membership duration.

#6. Advanced Queries:

#.............6.1. Rank customers based on their total spending.

SELECT CustomerID, 'Name', SUM(Price) AS TotalSpending
FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY CustomerID, 'Name'
ORDER BY TotalSpending DESC;


#6.2. Identify the most popular product category.

SELECT Category, COUNT(*) AS TotalOrders
FROM Products
JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID
GROUP BY Category
ORDER BY TotalOrders DESC
LIMIT 1;

#6.3. Calculate the month-over-month growth rate in sales.

SELECT MONTH(OrderDate) AS Month, YEAR(OrderDate) AS Year,
SUM(Price) AS MonthlySales,
(SUM(Price) / LAG(SUM(Price), 1) OVER (ORDER BY YEAR(OrderDate), MONTH(OrderDate))) - 1 AS GrowthRate
FROM Orders
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Year, Month;

#7. Data Manipulation and Updates:


#7.1. Add a new customer to the Customers table.

INSERT INTO Customers (CustomerID,Name, Email, joinDate) VALUES (11,'New Customer name', 'new@example.com', '2020-03-11');

#7.2. Update the price of a specific product.

UPDATE Products SET Price = 20.99 WHERE ProductID = 1;







